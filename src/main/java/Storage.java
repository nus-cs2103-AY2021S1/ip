package main.java.duke;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.Scanner;

import main.java.duke.task.Todo;
import main.java.duke.task.Deadline;
import main.java.duke.task.Event;
import main.java.duke.task.TaskList;
import main.java.duke.dukeexception.InvalidTaskException;

import static java.lang.Integer.parseInt;

public class Storage {
    private String filePath;

    public Storage(String filePath) {
        this.filePath = filePath;
    }

    /** Checks if there exists a file at dataDir/filePath
     * and creates one if it doesn't exist
     *
     * @throws IOException
     */
    private void checkOrCreateFile() throws IOException {
        Path fp = Paths.get(filePath);
        Path parentFolder = fp.getParent();

        File dataDir = parentFolder.toFile();
        if (!dataDir.exists()) {
            dataDir.mkdirs();
        }

        File f = new File(filePath);
        if (!f.exists()) {
            f.createNewFile();
        }
    }

    /** Returns a TaskList of tasks described in the file at the
     * Storage object's dataDir/filePath
     *
     * @return TaskList generated by file at dataDir/filePath
     * @throws IOException
     */
    private TaskList loadInputFromFile() throws IOException, InvalidTaskException {
        File f = new File(filePath);
        Scanner sc = new Scanner(f);
        TaskList tl = new TaskList();

        String line;
        while(sc.hasNextLine()) {
            line = sc.nextLine();
            if (line.isEmpty()) {
                line = sc.nextLine();
            }

            // dissect info of a task contained in one line
            String[] info = line.split("/");
            String taskType = info[0];
            boolean done = (parseInt(info[1]) == 1);  // 1 stands for done, 0 for undone
            String description = info[2];

            if (taskType.equals("T")) {
                Todo todo = new Todo(description);
                if (done) {
                    todo.markAsDone();
                }
                tl.addTask(todo);
            } else if (taskType.equals("D")) {
                Deadline deadline = new Deadline(description, LocalDate.parse(info[3]));
                if (done) {
                    deadline.markAsDone();
                }
                tl.addTask(deadline);
            } else if (taskType.equals("E")) {
                Event event = new Event(description, LocalDate.parse(info[3]));
                if (done) {
                    event.markAsDone();
                }
                tl.addTask(event);
            } else {
                throw new InvalidTaskException();
            }
        }

        sc.close();

        return tl;
    }

    /** Creates a file at the storage object's filePath if necessary,
     * and returns a TaskList of tasks described in that file.
     * Essentially, the initialisation function for Duke's task list.
     *
     * @return TaskList generated from file at dataDir/filePath
     */
    public TaskList load() throws IOException, InvalidTaskException {
        checkOrCreateFile();
        return loadInputFromFile();
    }

    /** Saves the tasks from the given TaskList into the file at dataDir/filePath
     *
     * @param tasks  most-updated TaskList while Duke is running
     */
    public void save(TaskList tasks) throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));

        for (int i = 0; i < tasks.getSize(); i++) {
            writer.write("\n" + tasks.getTask(i).saveToFile());
        }
        writer.close();
    }
}
