/**
 * Handles all the UI design of the replies generated by King.
 *
 * @author jun siang
 */
package king;

import tasks.TaskList;

public class UI {

    /**
     * Returns the Welcome message and logo.
     *
     * @return String welcome message.
     */
    public static String welcome() {
        String logo =
                " ____  __.__\n" +
                        "|    |/ _|__| ____    ____\n" +
                        "|      < |  |/    \\  / ___\\\n" +
                        "|    |  \\|  |   |  \\/ /_/  >\n" +
                        "|____|__ \\__|___|  /\\___  /\n" +
                        "        \\/       \\//_____/\n";
        return logo + "\n" + "Hello! I'm King\nWhat can I do for you?";
    }

    /**
     * Returns a chat box wrapped around a given text.
     *
     * @param chatContent text string.
     * @return String chat box around text.
     */
    public static String chatBox(String chatContent) {
        return "\t=== King says =========================\n" +
                "\t " + chatContent + "\n" +
                "\t=======================================\n";
    }

    /**
     * Returns an error box wrapped around an error message.
     *
     * @param error error message.
     * @return String error box around error message.
     */
    public static String errorBox(String error) {
        return "-------- Error Encountered -------------------------------------\n" +
                "\t " + error + "\n" +
                "----------------------------------------------------------------\n";
    }

    /**
     * Returns a chat box wrap around a message when the user successfully adds an item.
     *
     * @param chatContent text String.
     * @param noOfItems   number of items in the new TaskList.
     * @return String chat box after adding item.
     * @see TaskList
     */
    public static String addItemChatBox(String chatContent, int noOfItems) {
        return "\t=== King says =========================\n" +
                "\t Got it. I've added this task:\n" +
                "\t\t" + chatContent + "\n" +
                "\t Now you have " + noOfItems + " tasks in the list.\n" +
                "\t=======================================\n";
    }

    /**
     * Returns a formatted chat string containing the items in the TaskList.
     *
     * @param taskList the task list to be printed.
     * @return String formatted String with items in the taskList.
     */
    public static String listTaskList(TaskList taskList) {
        StringBuilder formatted = new StringBuilder();
        int len = taskList.size();
        for (int number = 0; number < len; number++) {
            formatted.append("\t" + (number + 1) + ". " + taskList.get(number).toString() + "\n");
        }
        return "\t=== King says =========================\n" +
                "\tThere are " + len + " items in your list:\n" +
                formatted.toString() +
                "\t=======================================\n";
    }

    /**
     * Returns a formatted string containing items found in the list.
     *
     * @param taskList taskList of the items found.
     * @return String formatted printable list
     */
    public static String foundItemsList(TaskList taskList, String keyword) {
        StringBuilder formatted = new StringBuilder();
        int len = taskList.size();
        for (int number = 0; number < len; number++) {
            formatted.append("\t" + (number + 1) + ". " + taskList.get(number).toString() + "\n");
        }
        return "\t=== King says =========================\n" +
                "\tI found " + len + " items with the " + keyword + " keyword:\n" +
                formatted.toString() +
                "\t=======================================\n";
    }
}
