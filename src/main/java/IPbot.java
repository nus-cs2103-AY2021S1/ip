import tasks.Deadline;
import tasks.Event;
import tasks.Task;
import tasks.Todo;

import java.util.ArrayList;
import java.util.Scanner;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class IPbot {

    // command strings
    private static final String EXIT_CMD = "bye";
    private static final String LIST_CMD = "list";
    private static final String DONE_CMD = "done ";
    private static final String TODO_CMD = "todo ";
    private static final String EVENT_CMD = "event ";
    private static final String DEADLINE_CMD = "deadline ";


    // user input
    private static final Scanner sc = new Scanner(System.in);

    // task list
    private static final ArrayList<Task> tasks = new ArrayList<>();

    /**
     * Entry point of the program.
     * @param args command line arguments
     */
    public static void main(String[] args) {
        print("Hello from iPbot, what can I do for you?");

        Stream.generate(sc::nextLine)
            .takeWhile(input -> !EXIT_CMD.equals(input))
            .forEach(input -> {
                final String output;
                if (LIST_CMD.equals(input)) {
                    // list tasks
                    output = listTasks();
                } else if (input.startsWith(DONE_CMD)) {
                    // mark a task as done
                    final String stripped = input.substring(DONE_CMD.length());
                    final int id = Integer.parseInt(stripped);
                    output = completeTask(tasks.get(id - 1));
                } else if (input.startsWith(TODO_CMD)) {
                    // add to do task
                    final String stripped = input.substring(TODO_CMD.length());
                    output = addTasks(new Todo(stripped));
                } else if (input.startsWith(EVENT_CMD)) {
                    // add event task
                    final String stripped = input.substring(EVENT_CMD.length());
                    final String[] split = stripped.split(" /at ", 2);
                    output = addTasks(new Event(split[0], split[1]));
                } else if (input.startsWith(DEADLINE_CMD)) {
                    // add deadline task
                    final String stripped = input.substring(DEADLINE_CMD.length());
                    final String[] split = stripped.split(" /by ", 2);
                    output = addTasks(new Deadline(split[0], split[1]));
                } else {
                    output = "Unknown command";
                }
                print(output);
            });

        sc.close();
        print("Goodbye!");
    }

    /**
     * Adds a task to the list of tasks.
     * @param toAdd the task to be added
     * @return String containing output generated from iPbot
     */
    private static String addTasks(Task toAdd) {
        tasks.add(toAdd);
        return String.format("added: %s\nThere are now %d tasks.",
                toAdd.toString(), tasks.size());
    }

    /**
     * Queries the list of tasks and displays them.
     * @return String containing output generated from iPbot
     */
    private static String listTasks() {
        return tasks.isEmpty()
                ? "No tasks added."
                : tasks.stream()
                    .map(new Function<Task, String>() {
                        int id = 1;
                        public String apply(Task t) {
                            return String.format("%d. %s", id++, t.toString());
                        }
                    })
                    .collect(Collectors.joining("\n"));
    }

    /**
     * Marks a task as done.
     * @param toComplete the task to be marked as done
     * @return String containing output generated from iPbot
     */
    private static String completeTask(Task toComplete) {
        if (toComplete.getDoneStatus()) {
            // already done
            return "Task already done:\n" + toComplete;
        } else {
            // mark as done
            toComplete.markAsDone();
            return "Task done:\n" + toComplete;
        }
    }

    /**
     * Prints output generated by the bot.
     * @param output string of output to be printed
     */
    public static void print(String output) {
        System.out.println("____________________________________________________________");
        System.out.println(output);
        System.out.println("____________________________________________________________");
        System.out.println();
    }
}
