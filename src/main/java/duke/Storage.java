package duke;

import duke.task.Todo;
import duke.task.Deadline;
import duke.task.Event;
import duke.task.TaskList;
import duke.dukeexception.InvalidTaskException;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.Scanner;

import static java.lang.Integer.parseInt;

/**
 * Deals with loading tasks from a file and saving tasks into the file.
 *
 * @author Hui Ling
 */
public class Storage {
    /**
     * File path of the data file
     */
    private final String filePath;

    /**
     * Constructs a <code>Storage</code> object with specified <code>filePath</code>.
     *
     * @param filePath  file path to data file relative to working directory
     */
    public Storage(String filePath) {
        this.filePath = filePath;
    }

    /** Checks if there exists a file at <code>filePath</code>
     * and creates one if it doesn't exist.
     *
     * @throws IOException  if file or directories along the path cannot be created
     */
    private void checkOrCreateFile() throws IOException {
        Path fp = Paths.get(filePath);
        Path parentFolder = fp.getParent();

        File dataDir = parentFolder.toFile();
        if (!dataDir.exists()) {
            dataDir.mkdirs();
        }

        File dataFile = new File(filePath);
        if (!dataFile.exists()) {
            dataFile.createNewFile();
        }
    }

    /**
     * Returns a <code>TaskList</code> of tasks line-by-line from the file at this
     * <code>Storage</code> object's <code>filePath</code>. Tasks can be of type <code>Todo</code>,
     * <code>Deadline</code> or <code>Event</code>, and will be marked as done or undone.
     *
     * @return TaskList generated by file at <code>filePath</code>
     * @throws IOException           if file cannot be found or opened
     * @throws InvalidTaskException  if command type of a line is not recognised
     */
    private TaskList loadInputFromFile() throws IOException, InvalidTaskException {
        File f = new File(filePath);
        Scanner sc = new Scanner(f);
        TaskList tl = new TaskList();

        String line;
        while (sc.hasNextLine()) {
            line = sc.nextLine();
            if (line.isEmpty()) {
                line = sc.nextLine();
            }

            // dissect info of a task contained in one line
            String[] info = line.split("/");
            String taskType = info[0];
            boolean isDone = (parseInt(info[1]) == 1);  // 1 stands for done, 0 for undone
            String description = info[2];

            if (taskType.equals("T")) {
                Todo todo = new Todo(description, isDone);
                tl.addTask(todo);
            } else if (taskType.equals("D")) {
                Deadline deadline = new Deadline(description, LocalDate.parse(info[3]), isDone);
                tl.addTask(deadline);
            } else if (taskType.equals("E")) {
                Event event = new Event(description, LocalDate.parse(info[3]), isDone);
                tl.addTask(event);
            } else {
                throw new InvalidTaskException();
            }
        }

        sc.close();

        return tl;
    }

    /** Creates a file at this <code>Storage</code> object's <code>filePath</code> if necessary,
     * and returns a <code>TaskList</code> of tasks described line-by-line in that file.
     * Essentially, the initialisation function for Duke's <code>taskList</code>.
     *
     * Called when initialising Duke's <code>taskList</code> object.
     *
     * @return TaskList generated from file at <code>filePath</code>
     * @throws IOException           if file cannot be created or opened
     * @throws InvalidTaskException  if command type of a line is not recognised
     */
    public TaskList load() throws IOException, InvalidTaskException {
        checkOrCreateFile();
        return loadInputFromFile();
    }

    /**
     * Saves the tasks from the given <code>TaskList</code> into the file at <code>filePath</code>
     * in the specific format read by <code>loadInputFromFile</code>, so as to
     * preserve the <code>taskList</code> for when Duke is next run.
     *
     * Called right before the app is closed.
     *
     * @param taskList      list of tasks of Duke object right before app closes
     * @throws IOException  if file at <code>filePath</code> cannot be found or written to
     */
    public void save(TaskList taskList) throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));
        for (int i = 0; i < taskList.getSize(); i++) {
            writer.write("\n" + taskList.getTask(i).saveToFile());
        }
        writer.close();
    }
}
