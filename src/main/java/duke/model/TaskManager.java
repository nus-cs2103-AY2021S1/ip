package duke.model;

import java.util.ArrayList;

import duke.exceptions.DukeException;
import duke.model.task.Task;

/**
 * Manages the ArrayList of Tasks in memory.
 */
public class TaskManager {
    private ArrayList<Task> taskList;

    /**
     * Constructor for TaskManager class.
     * Instantiates a new ArrayList on first run or if unable to load save file from disk.
     */
    public TaskManager() {
        this.taskList = new ArrayList<Task>();
    }

    /**
     * Constructor for TaskManager class.
     * Handles loading of ArrayList of Tasks from save file.
     *
     * @param taskList ArrayList of Tasks generated by Storage object when loading from disk.
     */
    public TaskManager(ArrayList<Task> taskList) {
        this.taskList = taskList;
    }

    /**
     * Adds new Task to taskList.
     *
     * @param task Task to be added.
     */
    public void addTask(Task task) {
        taskList.add(task);
    }

    /**
     * Marks Task in taskList as done.
     *
     * @param index Index of Task to be marked as done.
     * @throws DukeException If Index is invalid or out of bounds.
     */
    public void markTaskDone(int index) throws DukeException {
        try {
            Task completedTask = taskList.get(index);
            completedTask.markAsDone();
            assert completedTask.isDone();
        } catch (IndexOutOfBoundsException e) {
            throw new DukeException("Invalid index!");
        }
    }

    /**
     * Deletes a Task from taskList.
     *
     * @param index Index of Task to be deleted.
     * @throws DukeException If Index is invalid or out of bounds.
     */
    public void deleteTask(int index) throws DukeException {
        try {
            Task toDeleteTask = taskList.get(index);
            taskList.remove(toDeleteTask);
            assert (taskList.contains(toDeleteTask) == false);
        } catch (IndexOutOfBoundsException e) {
            throw new DukeException("Invalid index!");
        }
    }

    /**
     * Returns a Task from taskList.
     *
     * @param index Index of Task to be retrieved.
     * @return Task at the given index.
     * @throws DukeException If Index is invalid or out of bounds.
     */
    public Task getTask(int index) throws DukeException {
        try {
            return taskList.get(index);
        } catch (IndexOutOfBoundsException e) {
            throw new DukeException("Invalid index!");
        }
    }

    /**
     * Returns the entire ArrayList of Tasks in memory.
     *
     * @return ArrayList of Tasks.
     */
    public ArrayList<Task> getTaskList() {
        return taskList;
    }


    /**
     * Searches taskList for Task description containing keyword.
     *
     * @param searchTerm Keyword to be searched.
     * @return ArrayList of Tasks containing keyword.
     */
    public ArrayList<Task> findTasks(String searchTerm) {
        ArrayList<Task> matchingTasks = new ArrayList<Task>();
        for (Task task : taskList) {
            if (task.getDescription().contains(searchTerm)) {
                matchingTasks.add(task);
            }
        }
        return matchingTasks;
    }

    /**
     * Returns number of Tasks currently in taskList.
     *
     * @return Number of Tasks current in taskList.
     */
    public int size() {
        return taskList.size();
    }
}
